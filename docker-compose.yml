services:
  broker:
    image: apache/kafka:3.7.2
    ports:
      - 9092:9092
    tmpfs:
      - /tmp:mode=777
      - /opt/kafka/logs:mode=777
    environment:
      # These configuration values are from
      # https://github.com/apache/kafka/blob/trunk/docker/examples/docker-compose-files/single-node/plaintext/docker-compose.yml
      # 
      # We can't use the default configuration, because we want to be able to reach the container
      # from outside the Docker network.
      #
      # From inside the Docker network, this node is known as "kafka-broker",
      # but when connecting from the local machine outside of Docker it is
      # "localhost".
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      # The rest of these are default settings for the Docker container.
      # If you specify ANY configuration, it requires you to specify ALL of the
      # configuration.
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_SHARE_COORDINATOR_STATE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SHARE_COORDINATOR_STATE_TOPIC_MIN_ISR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    
  init_kafka:
    # Create the topic used by the service.
    depends_on:
      - broker
    image: apache/kafka:3.7.2
    command: /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:19092 --create --topic rubin-prompt-processing-butler-output